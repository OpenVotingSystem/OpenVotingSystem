"""
Implementation of the Pailler Cryptosystem
"""
 
import fractions
import random
from math import sqrt
 
def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)
 
def modinv(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError
    return x % m
   
def isPrime(a):
    if a < 2: return False
    for x in range(2, int(sqrt(a)) + 1):
        if a % x == 0:
            return False
    return True
 
def phi(n):
    amount = 0
 
    for k in range(1, n + 1):
        if fractions.gcd(n, k) == 1:
            amount += 1
 
    return amount
   
def random_prime(n):
    import random
    primes = [i for i in range(1,n+1) if isPrime(i)]
    return random.choice(primes)
 
 
def generate_primes():
    p = random_prime(1000)
    q = random_prime(1000)
    if len(str(p)) == len(str(q)):
        #p,q should be large
        return p,q
    else:
        return generate_primes()
 
def generate_param():
    p,q = generate_primes()
    n = p*q
    g = n+1
    l = phi(n)
    u = modinv(l,n)
    #u = phi(n)^(-1) mod n
    return (n,g),(l,u)
 
public_key,private_key = generate_param()
